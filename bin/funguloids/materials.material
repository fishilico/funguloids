material Background
{
	technique
	{
		pass
		{
			lighting off
			depth_write off
			depth_check off
			cull_hardware none
			cull_software none


			texture_unit
			{
				texture tausta2.jpg
				tex_address_mode clamp
				filtering none
			}
		}
	}
}


material BackgroundStars
{
	technique
	{
		pass
		{
			scene_blend add
			lighting off
			depth_write off
		}
	}
}


material BackgroundNebula1
{
	technique
	{
		pass
		{
			lighting off
			depth_write off
			depth_check off
			cull_hardware none
			cull_software none
			scene_blend alpha_blend

			texture_unit
			{
				texture nebula1.png
				tex_address_mode clamp
			}
			texture_unit
			{
				colour_op_ex modulate src_current src_manual 1 1 1
			}
		}
	}
}


material BackgroundNebula2 : BackgroundNebula1
{
	technique
	{
		pass
		{
			texture_unit
			{
				texture nebula2.png
			}
		}
	}
}


material BackgroundNebula3 : BackgroundNebula1
{
	technique
	{
		pass
		{
			texture_unit
			{
				texture nebula3.png
			}
		}
	}
}


material Logo
{
	technique
	{
		pass
		{
			lighting off
			depth_write off
			depth_check off
			cull_hardware none
			cull_software none
			scene_blend alpha_blend

			texture_unit
			{
				texture logo.dds
				tex_address_mode clamp
			}
		}
	}
}

material BlackHole
{
	technique
	{
		pass
		{
			lighting off
			depth_write off
			depth_check off
			cull_hardware none
			cull_software none
			scene_blend alpha_blend

			texture_unit
			{
				texture blackhole.png
				tex_address_mode clamp
			}
		}
	}
}



material TentacleMat
{
	technique
	{
		pass
		{
			lighting off
			depth_write off
			depth_check off
			cull_hardware none
			cull_software none
			scene_blend alpha_blend

			texture_unit
			{
				texture tentacles.png
				tex_address_mode clamp
			}
		}
	}
}


material PlayerBeamTrail
{
	technique
	{
		pass
		{
			lighting off
			scene_blend add
			depth_write off

			texture_unit
			{
				texture ribbonband.png 1d
				tex_address_mode clamp
				filtering none
			}
		}
	}
}


material WhirlerBeamTrail
{
	technique
	{
		pass
		{
			lighting off
			scene_blend add
			depth_write off

			texture_unit
			{
				texture ribbonband.png 1d
				tex_address_mode clamp
				filtering none
			}
		}
	}
}


material DropMat
{
	technique
	{
		pass
		{
			//lighting on
			diffuse 1 1 1
			ambient 1 1 1
			specular 1 1 1 10
			emissive 1 1 1
			//scene_blend add
			//depth_write off

			texture_unit
			{
				texture droplet.jpg
				env_map spherical
			}
		}
	}
}


material DropFlare
{
	technique
	{
		pass
		{
			lighting off
			scene_blend add
			depth_write off

			texture_unit
			{
				texture droplet_flare.png
				tex_address_mode clamp
			}
		}
	}
}


material WhirlerMat
{
	technique
	{
		pass
		{
			//lighting on
			diffuse 1 1 1
			ambient 1 1 1
			specular 1 1 1 10
			emissive 0.75 0.5 0.5
			scene_blend add
			depth_write off

			texture_unit
			{
				texture whirler.jpg
				env_map spherical
			}
		}
	}
}


material WhirlerFlare
{
	technique
	{
		pass
		{
			lighting off
			scene_blend add
			depth_write off

			texture_unit
			{
				texture whirler_flare.jpg
				tex_address_mode clamp
			}
		}
	}
}


material WormMaterial
{
	technique
	{
		pass
		{
			//lighting on
			diffuse 1 1 1
			ambient 1 1 1
			specular 1 1 1 10
			emissive 0.5 0.5 0.5
			scene_blend add
			depth_write off

			texture_unit
			{
				texture ballworm.jpg
				env_map spherical
			}
			texture_unit
			{
				texture ballworm2.jpg
				env_map spherical
				colour_op add
				scroll_anim 0.1 -0.2
				rotate_anim 0.1
			}
		}
	}
}



material MushroomFlare1
{
	technique
	{
		pass
		{
			lighting off
			scene_blend add
			depth_write off

			texture_unit
			{
				texture glow.png
				tex_address_mode clamp
			}
			texture_unit
			{
				colour_op_ex modulate src_current src_manual 0.5 0.2 0.1
			}
		}
	}
}

material MushroomFlare2 : MushroomFlare1
{
	technique
	{
		pass
		{
			texture_unit 1
			{
				colour_op_ex modulate src_current src_manual 0.2 0.5 0.1
			}
		}
	}
}

material MushroomFlare3 : MushroomFlare1
{
	technique
	{
		pass
		{
			texture_unit 1
			{
				colour_op_ex modulate src_current src_manual 0.1 0.2 0.5
			}
		}
	}
}

//material MushroomFlare4 : MushroomFlare1
//{
//	technique
//	{
//		pass
//		{
//			texture_unit 1
//			{
//				colour_op_ex modulate src_current src_manual 0.5 0.5 0.2
//			}
//		}
//	}
//}



////////////////////////////////////////////
// BUMP MAPPED MATERIALS
////////////////////////////////////////////



// Bump map vertex program, support for this is required
vertex_program Examples/BumpMapVP cg
{
	source Example_BumpMapping.cg
	entry_point main_vp
	profiles vs_1_1 arbvp1
}

// Bump map fragment program, support for this is optional
fragment_program Examples/BumpMapFP cg
{
	source Example_BumpMapping.cg
	entry_point main_fp
	profiles ps_1_1 arbfp1 fp20
}

// Bump map vertex program shadow receiver
vertex_program Examples/BumpMapVPShadowRcv cg
{
	source Example_BumpMapping.cg
	entry_point main_shadowreceiver_vp
	profiles vs_1_1 arbvp1
}
// Bump map fragment program shadow receiver, support for this is optional
fragment_program Examples/BumpMapFPShadowRcv cg
{
	source Example_BumpMapping.cg
	entry_point main_shadowreceiver_fp
	profiles ps_1_1 arbfp1 fp20
}


// Bump map with specular vertex program, support for this is required
vertex_program Examples/BumpMapVPSpecular cg
{
	source Example_BumpMapping.cg
	entry_point specular_vp
	profiles vs_1_1 arbvp1
}

// Bump map fragment program, support for this is optional
fragment_program Examples/BumpMapFPSpecular cg
{
	source Example_BumpMapping.cg
	entry_point specular_fp
	profiles ps_1_1 arbfp1 fp20
}


// Asteroid for level 1
// Any number of lights, diffuse
material AsteroidMat
{
	// This is the preferred technique which uses both vertex and
	// fragment programs, supports coloured lights
	technique
	{
		// Base ambient pass
		pass
		{
			// base colours, not needed for rendering, but as information
			// to lighting pass categorisation routine
			ambient 1 1 1
			diffuse 0 0 0
			specular 0 0 0 0
			// Really basic vertex program
			// NB we don't use fixed function here because GL does not like
			// mixing fixed function and vertex programs, depth fighting can
			// be an issue
			vertex_program_ref Ogre/BasicVertexPrograms/AmbientOneTexture
			{
				param_named_auto worldViewProj worldviewproj_matrix
				param_named_auto ambient ambient_light_colour
			}

		}
		// Now do the lighting pass
		// NB we don't do decal texture here because this is repeated per light
		pass
		{
			// base colours, not needed for rendering, but as information
			// to lighting pass categorisation routine
			ambient 0 0 0

			// do this for each light
			iteration once_per_light


			scene_blend add

			// Vertex program reference
			vertex_program_ref Examples/BumpMapVP
			{
				param_named_auto lightPosition light_position_object_space 0
				param_named_auto worldViewProj worldviewproj_matrix
			}

			// Fragment program
			fragment_program_ref Examples/BumpMapFP
			{
				param_named_auto lightDiffuse light_diffuse_colour 0
			}

			// Base bump map
			texture_unit
			{
				texture bump1.png
				colour_op replace
			}
			// Normalisation cube map
			texture_unit
			{
				cubic_texture nm.png combinedUVW
				tex_coord_set 1
				tex_address_mode clamp
			}
		}

		// Decal pass
		pass
		{
			// base colours, not needed for rendering, but as information
			// to lighting pass categorisation routine
			lighting off
			// Really basic vertex program
			// NB we don't use fixed function here because GL does not like
			// mixing fixed function and vertex programs, depth fighting can
			// be an issue
			vertex_program_ref Ogre/BasicVertexPrograms/AmbientOneTexture
			{
				param_named_auto worldViewProj worldviewproj_matrix
				param_named ambient float4 1 1 1 1
			}
			scene_blend dest_colour zero
			texture_unit
			{
				texture at1.jpg
			}

		}
	}

	// This is the fallback which cards which don't have fragment program
	// support will use
	// Note that it still requires vertex program support
	technique
	{
		// Base ambient pass
		pass
		{
			// base colours, not needed for rendering, but as information
			// to lighting pass categorisation routine
			ambient 1 1 1
			diffuse 0 0 0
			specular 0 0 0 0
			// Really basic vertex program
			// NB we don't use fixed function here because GL does not like
			// mixing fixed function and vertex programs, depth fighting can
			// be an issue
			vertex_program_ref Ogre/BasicVertexPrograms/AmbientOneTexture
			{
				param_named_auto worldViewProj worldviewproj_matrix
				param_named_auto ambient ambient_light_colour
			}

		}
		// Now do the lighting pass
		// NB we don't do decal texture here because this is repeated per light
		pass
		{
			// base colours, not needed for rendering, but as information
			// to lighting pass categorisation routine
			ambient 0 0 0
			// do this for each light
			iteration once_per_light


			scene_blend add

			// Vertex program reference
			vertex_program_ref Examples/BumpMapVP
			{
				param_named_auto lightPosition light_position_object_space 0
				param_named_auto worldViewProj worldviewproj_matrix
			}

			// Base bump map
			texture_unit
			{
				texture bump1.png
				colour_op replace
			}
			// Normalisation cube map, with dot product on bump map
			texture_unit
			{
				cubic_texture nm.png combinedUVW
				tex_coord_set 1
				tex_address_mode clamp
				colour_op_ex dotproduct src_texture src_current
				colour_op_multipass_fallback dest_colour zero
			}
		}

		// Decal pass
		pass
		{
			lighting off
			// Really basic vertex program
			// NB we don't use fixed function here because GL does not like
			// mixing fixed function and vertex programs, depth fighting can
			// be an issue
			vertex_program_ref Ogre/BasicVertexPrograms/AmbientOneTexture
			{
				param_named_auto worldViewProj worldviewproj_matrix
				param_named ambient float4 1 1 1 1
			}
			scene_blend dest_colour zero
			texture_unit
			{
				texture at1.jpg
			}
		}
	}

	// The basic texture for the oldest cards (for example my old Gefore 2 MX)
	technique
	{
		pass
		{
			ambient 1 1 1
			diffuse 1 1 1
			specular 0 0 0 0
			texture_unit
			{
				texture at1.jpg
			}
		}
	}
}


// Asteroids for level 2
// Any number of lights, diffuse
material Level2AsteroidMat
{

	// This is the preferred technique which uses both vertex and
	// fragment programs, supports coloured lights
	technique
	{
		// Base ambient pass
		pass
		{
			// base colours, not needed for rendering, but as information
			// to lighting pass categorisation routine
			ambient 1 1 1
			diffuse 0 0 0
			specular 0 0 0 0
			// Really basic vertex program
			// NB we don't use fixed function here because GL does not like
			// mixing fixed function and vertex programs, depth fighting can
			// be an issue
			vertex_program_ref Ogre/BasicVertexPrograms/AmbientOneTexture
			{
				param_named_auto worldViewProj worldviewproj_matrix
				param_named_auto ambient ambient_light_colour
			}

		}
		// Now do the lighting pass
		// NB we don't do decal texture here because this is repeated per light
		pass
		{
			// base colours, not needed for rendering, but as information
			// to lighting pass categorisation routine
			ambient 0 0 0

			// do this for each light
			iteration once_per_light


			scene_blend add

			// Vertex program reference
			vertex_program_ref Examples/BumpMapVP
			{
				param_named_auto lightPosition light_position_object_space 0
				param_named_auto worldViewProj worldviewproj_matrix
			}

			// Fragment program
			fragment_program_ref Examples/BumpMapFP
			{
				param_named_auto lightDiffuse light_diffuse_colour 0
			}

			// Base bump map
			texture_unit
			{
				texture bump2.png
				colour_op replace
			}
			// Normalisation cube map
			texture_unit
			{
				cubic_texture nm.png combinedUVW
				tex_coord_set 1
				tex_address_mode clamp
			}
		}

		// Decal pass
		pass
		{
			// base colours, not needed for rendering, but as information
			// to lighting pass categorisation routine
			lighting off
			// Really basic vertex program
			// NB we don't use fixed function here because GL does not like
			// mixing fixed function and vertex programs, depth fighting can
			// be an issue
			vertex_program_ref Ogre/BasicVertexPrograms/AmbientOneTexture
			{
				param_named_auto worldViewProj worldviewproj_matrix
				param_named ambient float4 1 1 1 1
			}
			scene_blend dest_colour zero
			texture_unit
			{
				texture at2.jpg
			}

		}
	}

	// This is the fallback which cards which don't have fragment program
	// support will use
	// Note that it still requires vertex program support
	technique
	{
		// Base ambient pass
		pass
		{
			// base colours, not needed for rendering, but as information
			// to lighting pass categorisation routine
			ambient 1 1 1
			diffuse 0 0 0
			specular 0 0 0 0
			// Really basic vertex program
			// NB we don't use fixed function here because GL does not like
			// mixing fixed function and vertex programs, depth fighting can
			// be an issue
			vertex_program_ref Ogre/BasicVertexPrograms/AmbientOneTexture
			{
				param_named_auto worldViewProj worldviewproj_matrix
				param_named_auto ambient ambient_light_colour
			}

		}
		// Now do the lighting pass
		// NB we don't do decal texture here because this is repeated per light
		pass
		{
			// base colours, not needed for rendering, but as information
			// to lighting pass categorisation routine
			ambient 0 0 0
			// do this for each light
			iteration once_per_light


			scene_blend add

			// Vertex program reference
			vertex_program_ref Examples/BumpMapVP
			{
				param_named_auto lightPosition light_position_object_space 0
				param_named_auto worldViewProj worldviewproj_matrix
			}

			// Base bump map
			texture_unit
			{
				texture bump2.png
				colour_op replace
			}
			// Normalisation cube map, with dot product on bump map
			texture_unit
			{
				cubic_texture nm.png combinedUVW
				tex_coord_set 1
				tex_address_mode clamp
				colour_op_ex dotproduct src_texture src_current
				colour_op_multipass_fallback dest_colour zero
			}
		}

		// Decal pass
		pass
		{
			lighting off
			// Really basic vertex program
			// NB we don't use fixed function here because GL does not like
			// mixing fixed function and vertex programs, depth fighting can
			// be an issue
			vertex_program_ref Ogre/BasicVertexPrograms/AmbientOneTexture
			{
				param_named_auto worldViewProj worldviewproj_matrix
				param_named ambient float4 1 1 1 1
			}
			scene_blend dest_colour zero
			texture_unit
			{
				texture at2.jpg
			}
		}
	}

	// The basic texture for the oldest cards (for example my old Gefore 2 MX)
	technique
	{
		pass
		{
			ambient 1 1 1
			diffuse 1 1 1
			specular 0 0 0 0
			texture_unit
			{
				texture at2.jpg
			}
		}
	}
}



// Asteroids for level 3
// Any number of lights, diffuse
material Level3AsteroidMat
{

	// This is the preferred technique which uses both vertex and
	// fragment programs, supports coloured lights
	technique
	{
		// Base ambient pass
		pass
		{
			// base colours, not needed for rendering, but as information
			// to lighting pass categorisation routine
			ambient 1 1 1
			diffuse 0 0 0
			specular 0 0 0 0
			// Really basic vertex program
			// NB we don't use fixed function here because GL does not like
			// mixing fixed function and vertex programs, depth fighting can
			// be an issue
			vertex_program_ref Ogre/BasicVertexPrograms/AmbientOneTexture
			{
				param_named_auto worldViewProj worldviewproj_matrix
				param_named_auto ambient ambient_light_colour
			}

		}
		// Now do the lighting pass
		// NB we don't do decal texture here because this is repeated per light
		pass
		{
			// base colours, not needed for rendering, but as information
			// to lighting pass categorisation routine
			ambient 0 0 0

			// do this for each light
			iteration once_per_light


			scene_blend add

			// Vertex program reference
			vertex_program_ref Examples/BumpMapVP
			{
				param_named_auto lightPosition light_position_object_space 0
				param_named_auto worldViewProj worldviewproj_matrix
			}

			// Fragment program
			fragment_program_ref Examples/BumpMapFP
			{
				param_named_auto lightDiffuse light_diffuse_colour 0
			}

			// Base bump map
			texture_unit
			{
				texture bump3.png
				colour_op replace
			}
			// Normalisation cube map
			texture_unit
			{
				cubic_texture nm.png combinedUVW
				tex_coord_set 1
				tex_address_mode clamp
			}
		}

		// Decal pass
		pass
		{
			// base colours, not needed for rendering, but as information
			// to lighting pass categorisation routine
			lighting off
			// Really basic vertex program
			// NB we don't use fixed function here because GL does not like
			// mixing fixed function and vertex programs, depth fighting can
			// be an issue
			vertex_program_ref Ogre/BasicVertexPrograms/AmbientOneTexture
			{
				param_named_auto worldViewProj worldviewproj_matrix
				param_named ambient float4 1 1 1 1
			}
			scene_blend dest_colour zero
			texture_unit
			{
				texture at3.jpg
			}

		}
	}

	// This is the fallback which cards which don't have fragment program
	// support will use
	// Note that it still requires vertex program support
	technique
	{
		// Base ambient pass
		pass
		{
			// base colours, not needed for rendering, but as information
			// to lighting pass categorisation routine
			ambient 1 1 1
			diffuse 0 0 0
			specular 0 0 0 0
			// Really basic vertex program
			// NB we don't use fixed function here because GL does not like
			// mixing fixed function and vertex programs, depth fighting can
			// be an issue
			vertex_program_ref Ogre/BasicVertexPrograms/AmbientOneTexture
			{
				param_named_auto worldViewProj worldviewproj_matrix
				param_named_auto ambient ambient_light_colour
			}

		}
		// Now do the lighting pass
		// NB we don't do decal texture here because this is repeated per light
		pass
		{
			// base colours, not needed for rendering, but as information
			// to lighting pass categorisation routine
			ambient 0 0 0
			// do this for each light
			iteration once_per_light


			scene_blend add

			// Vertex program reference
			vertex_program_ref Examples/BumpMapVP
			{
				param_named_auto lightPosition light_position_object_space 0
				param_named_auto worldViewProj worldviewproj_matrix
			}

			// Base bump map
			texture_unit
			{
				texture bump3.png
				colour_op replace
			}
			// Normalisation cube map, with dot product on bump map
			texture_unit
			{
				cubic_texture nm.png combinedUVW
				tex_coord_set 1
				tex_address_mode clamp
				colour_op_ex dotproduct src_texture src_current
				colour_op_multipass_fallback dest_colour zero
			}
		}

		// Decal pass
		pass
		{
			lighting off
			// Really basic vertex program
			// NB we don't use fixed function here because GL does not like
			// mixing fixed function and vertex programs, depth fighting can
			// be an issue
			vertex_program_ref Ogre/BasicVertexPrograms/AmbientOneTexture
			{
				param_named_auto worldViewProj worldviewproj_matrix
				param_named ambient float4 1 1 1 1
			}
			scene_blend dest_colour zero
			texture_unit
			{
				texture at3.jpg
			}
		}
	}

	// The basic texture for the oldest cards (for example my old Gefore 2 MX)
	technique
	{
		pass
		{
			ambient 1 1 1
			diffuse 1 1 1
			specular 0 0 0 0
			texture_unit
			{
				texture at3.jpg
			}
		}
	}
}


// Red Mushroom
// Any number of lights, diffuse
material MushroomMat1
{

	// This is the preferred technique which uses both vertex and
	// fragment programs, supports coloured lights
	technique
	{
		// Base ambient pass
		pass
		{
			// base colours, not needed for rendering, but as information
			// to lighting pass categorisation routine
			ambient 1 1 1
			diffuse 0 0 0
			specular 0 0 0 0
			// Really basic vertex program
			// NB we don't use fixed function here because GL does not like
			// mixing fixed function and vertex programs, depth fighting can
			// be an issue
			vertex_program_ref Ogre/BasicVertexPrograms/AmbientOneTexture
			{
				param_named_auto worldViewProj worldviewproj_matrix
				param_named_auto ambient ambient_light_colour
			}

		}
		// Now do the lighting pass
		// NB we don't do decal texture here because this is repeated per light
		pass
		{
			// base colours, not needed for rendering, but as information
			// to lighting pass categorisation routine
			ambient 0 0 0

			// do this for each light
			iteration once_per_light


			scene_blend add

			// Vertex program reference
			vertex_program_ref Examples/BumpMapVP
			{
				param_named_auto lightPosition light_position_object_space 0
				param_named_auto worldViewProj worldviewproj_matrix
			}

			// Fragment program
			fragment_program_ref Examples/BumpMapFP
			{
				param_named_auto lightDiffuse light_diffuse_colour 0
			}

			// Base bump map
			texture_unit
			{
				texture mushroom_bump.png
				colour_op replace
			}
			// Normalisation cube map
			texture_unit
			{
				cubic_texture nm.png combinedUVW
				tex_coord_set 1
				tex_address_mode clamp
			}
		}

		// Decal pass
		pass
		{
			// base colours, not needed for rendering, but as information
			// to lighting pass categorisation routine
			lighting off
			// Really basic vertex program
			// NB we don't use fixed function here because GL does not like
			// mixing fixed function and vertex programs, depth fighting can
			// be an issue
			vertex_program_ref Ogre/BasicVertexPrograms/AmbientOneTexture
			{
				param_named_auto worldViewProj worldviewproj_matrix
				param_named ambient float4 1 1 1 1
			}
			scene_blend dest_colour zero
			texture_unit
			{
				texture_alias basetex1
				texture mushroom1.jpg
			}

		}
	}

	// This is the fallback which cards which don't have fragment program
	// support will use
	// Note that it still requires vertex program support
	technique
	{
		// Base ambient pass
		pass
		{
			// base colours, not needed for rendering, but as information
			// to lighting pass categorisation routine
			ambient 1 1 1
			diffuse 0 0 0
			specular 0 0 0 0
			// Really basic vertex program
			// NB we don't use fixed function here because GL does not like
			// mixing fixed function and vertex programs, depth fighting can
			// be an issue
			vertex_program_ref Ogre/BasicVertexPrograms/AmbientOneTexture
			{
				param_named_auto worldViewProj worldviewproj_matrix
				param_named_auto ambient ambient_light_colour
			}

		}
		// Now do the lighting pass
		// NB we don't do decal texture here because this is repeated per light
		pass
		{
			// base colours, not needed for rendering, but as information
			// to lighting pass categorisation routine
			ambient 0 0 0
			// do this for each light
			iteration once_per_light


			scene_blend add

			// Vertex program reference
			vertex_program_ref Examples/BumpMapVP
			{
				param_named_auto lightPosition light_position_object_space 0
				param_named_auto worldViewProj worldviewproj_matrix
			}

			// Base bump map
			texture_unit
			{
				texture mushroom_bump.png
				colour_op replace
			}
			// Normalisation cube map, with dot product on bump map
			texture_unit
			{
				cubic_texture nm.png combinedUVW
				tex_coord_set 1
				tex_address_mode clamp
				colour_op_ex dotproduct src_texture src_current
				colour_op_multipass_fallback dest_colour zero
			}
		}

		// Decal pass
		pass
		{
			lighting off
			// Really basic vertex program
			// NB we don't use fixed function here because GL does not like
			// mixing fixed function and vertex programs, depth fighting can
			// be an issue
			vertex_program_ref Ogre/BasicVertexPrograms/AmbientOneTexture
			{
				param_named_auto worldViewProj worldviewproj_matrix
				param_named ambient float4 1 1 1 1
			}
			scene_blend dest_colour zero
			texture_unit
			{
				texture_alias basetex2
				texture mushroom1.jpg
			}
		}
	}

	// The basic texture for the oldest cards (for example my old Gefore 2 MX)
	technique
	{
		pass
		{
			ambient 1 1 1
			diffuse 1 1 1
			specular 0 0 0 0
			texture_unit
			{
				texture_alias basetex3
				texture mushroom1.jpg
			}
		}
	}
}



// Green Mushroom
material MushroomMat2 : MushroomMat1
{
	set_texture_alias basetex1 mushroom2.jpg
	set_texture_alias basetex2 mushroom2.jpg
	set_texture_alias basetex3 mushroom2.jpg
}


// Blue Mushroom
material MushroomMat3 : MushroomMat1
{
	set_texture_alias basetex1 mushroom3.jpg
	set_texture_alias basetex2 mushroom3.jpg
	set_texture_alias basetex3 mushroom3.jpg
}


// Yellow Mushroom
//material MushroomMat4 : MushroomMat1
//{
//	set_texture_alias basetex1 mushroom4.jpg
//	set_texture_alias basetex2 mushroom4.jpg
//	set_texture_alias basetex3 mushroom4.jpg
//}



// Base material (metal)
// Any number of lights, diffuse and specular
material BaseMat1
{

	// This is the preferred technique which uses both vertex and
	// fragment programs, supports coloured lights
	technique
	{
		// Base ambient pass
		pass
		{
			// base colours, not needed for rendering, but as information
			// to lighting pass categorisation routine
			ambient 1 1 1
			diffuse 0 0 0
			specular 0 0 0 0
			// Really basic vertex program
			// NB we don't use fixed function here because GL does not like
			// mixing fixed function and vertex programs, depth fighting can
			// be an issue
			vertex_program_ref Ogre/BasicVertexPrograms/AmbientOneTexture
			{
				param_named_auto worldViewProj worldviewproj_matrix
				param_named_auto ambient ambient_light_colour
			}

		}
		// Now do the lighting pass
		// NB we don't do decal texture here because this is repeated per light
		pass
		{
			// base colours, not needed for rendering, but as information
			// to lighting pass categorisation routine
			ambient 0 0 0
			// do this for each light
			iteration once_per_light


			scene_blend add

			// Vertex program reference
			vertex_program_ref Examples/BumpMapVPSpecular
			{
				param_named_auto lightPosition light_position_object_space 0
				param_named_auto eyePosition camera_position_object_space
				param_named_auto worldViewProj worldviewproj_matrix
			}

			// Fragment program
			fragment_program_ref Examples/BumpMapFPSpecular
			{
				param_named_auto lightDiffuse light_diffuse_colour 0
				param_named_auto lightSpecular light_specular_colour 0
			}

			// Base bump map
			texture_unit
			{
				texture basebump.jpg
				colour_op replace
			}
			// Normalisation cube map
			texture_unit
			{
				cubic_texture nm.png combinedUVW
				tex_coord_set 1
				tex_address_mode clamp
			}
			// Normalisation cube map #2
			texture_unit
			{
				cubic_texture nm.png combinedUVW
				tex_coord_set 2
				tex_address_mode clamp
			}
		}

		// Decal pass
		pass
		{
			lighting off
			// Really basic vertex program
			// NB we don't use fixed function here because GL does not like
			// mixing fixed function and vertex programs, depth fighting can
			// be an issue
			vertex_program_ref Ogre/BasicVertexPrograms/AmbientOneTexture
			{
				param_named_auto worldViewProj worldviewproj_matrix
				param_named ambient float4 1 1 1 1
			}
			scene_blend dest_colour zero
			texture_unit
			{
				texture basemetal.jpg
			}

		}
	}

	// This is the fallback which cards which don't have fragment program
	// support will use, NB does not support specular colour
	// Note that it still requires vertex program support
	technique
	{
		// Base ambient pass
		pass
		{
			// base colours, not needed for rendering, but as information
			// to lighting pass categorisation routine
			ambient 1 1 1
			diffuse 0 0 0
			specular 0 0 0 0
			// Really basic vertex program
			// NB we don't use fixed function here because GL does not like
			// mixing fixed function and vertex programs, depth fighting can
			// be an issue
			vertex_program_ref Ogre/BasicVertexPrograms/AmbientOneTexture
			{
				param_named_auto worldViewProj worldviewproj_matrix
				param_named_auto ambient ambient_light_colour
			}

		}
		// Now do the lighting pass
		// NB we don't do decal texture here because this is repeated per light
		pass
		{
			// base colours, not needed for rendering, but as information
			// to lighting pass categorisation routine
			ambient 0 0 0
			// do this for each light
			iteration once_per_light


			scene_blend add

			// Vertex program reference
			vertex_program_ref Examples/BumpMapVP
			{
				param_named_auto lightPosition light_position_object_space 0
				param_named_auto worldViewProj worldviewproj_matrix
			}

			// Base bump map
			texture_unit
			{
				texture basebump.jpg
				colour_op replace
			}
			// Normalisation cube map, with dot product on bump map
			texture_unit
			{
				cubic_texture nm.png combinedUVW
				tex_coord_set 1
				tex_address_mode clamp
				colour_op_ex dotproduct src_texture src_current
				colour_op_multipass_fallback dest_colour zero
			}
		}

		// Decal pass
		pass
		{
			lighting off
			// Really basic vertex program
			// NB we don't use fixed function here because GL does not like
			// mixing fixed function and vertex programs, depth fighting can
			// be an issue
			vertex_program_ref Ogre/BasicVertexPrograms/AmbientOneTexture
			{
				param_named_auto worldViewProj worldviewproj_matrix
				param_named ambient float4 1 1 1 1
			}
			scene_blend dest_colour zero
			texture_unit
			{
				texture basemetal.jpg
			}
		}
	}

	// The basic texture for the oldest cards (for example my old Gefore 2 MX)
	technique
	{
		pass
		{
			ambient 1 1 1
			diffuse 1 1 1
			specular 0 0 0 0
			texture_unit
			{
				texture basemetal.jpg
			}
		}
	}
}


// Base material (red glow)
material BaseMat2_1
{
	technique
	{
		pass
		{
			diffuse 1 0.2 0.1
			ambient 0 0 0
			emissive 0.75 0 0
			texture_unit
			{
				texture baseglow.jpg
				scroll_anim 0.1 0.2
				//rotate_anim 0.01
			}
			texture_unit
			{
				texture baseglow.jpg
				scroll_anim 0.052 -0.1
				colour_op add
			}
			texture_unit
			{
				//colour_op_ex modulate src_texture src_current
				texture baseglow2.jpg
				colour_op modulate
			}
		}
	}
}


// Base material (green glow)
material BaseMat2_2 : BaseMat2_1
{
	technique
	{
		pass
		{
			diffuse 0.2 1 0.1
			emissive 0 0.75 0
		}
	}
}


// Base material (blue glow)
material BaseMat2_3 : BaseMat2_1
{
	technique
	{
		pass
		{
			diffuse 0.1 0.2 1
			emissive 0 0 0.75
		}
	}
}


// Base material (yellow glow)
material BaseMat2_4 : BaseMat2_1
{
	technique
	{
		pass
		{
			diffuse 1 1 0.2
			emissive 0.75 0.75 0
		}
	}
}

